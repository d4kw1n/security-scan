name: SonarQube Cloud Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Grant execute permission to jest
        run: chmod +x ./node_modules/.bin/jest

      - name: Run tests with coverage
        run: npm test
        continue-on-error: true

      - name: SonarQube Scan
        id: sonar_scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.organization=d4kw1n
            -Dsonar.projectKey=d4kw1n_security-scan
            -Dsonar.sources=.
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.exclusions=node_modules/**,dist/**,coverage/**
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.qualitygate.wait=true
        continue-on-error: true

      - name: Check for Issues and Comment on PR
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install jq
          sudo apt-get update && sudo apt-get install -y jq

          # Query SonarCloud API for issues (vulnerabilities, bugs, code smells)
          response=$(curl -s -f -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/issues/search?componentKeys=d4kw1n_security-scan&types=VULNERABILITY,BUG,CODE_SMELL&statuses=OPEN,CONFIRMED,REOPENED&pullRequest=${{ github.event.pull_request.number }}")
          if [ $? -ne 0 ]; then
            echo "❌ Failed to query SonarCloud API. Check SONAR_TOKEN or network."
            exit 1
          fi

          # Extract issues
          issues=$(echo "$response" | jq '.issues')
          if [ $? -ne 0 ]; then
            echo "❌ Failed to parse API response. Response: $response"
            exit 1
          fi

          # Check if there are issues or Quality Gate failed
          if [ "$(echo "$issues" | jq length)" -gt 0 ] || [ "${{ steps.sonar_scan.outcome }}" != "success" ]; then
            # Format issues for PR comment
            comment="⚠️ **SonarCloud Quality Gate Failed!**\n\n"
            if [ "$(echo "$issues" | jq length)" -gt 0 ]; then
              comment+="The following issues were detected:\n"
              echo "$issues" | jq -r '.[] | "- **\(.rule)**: \(.message) (Type: \(.type), Severity: \(.severity), File: \(.component), Line: \(.line // \"N/A\")")"' | while read -r issue; do
                comment+="$issue\n"
              done
            else
              comment+="No specific vulnerabilities, bugs, or code smells found, but Quality Gate failed due to other criteria (e.g., coverage).\n"
            fi
            comment+="\nPlease review and fix these issues. See [SonarCloud Dashboard](https://sonarcloud.io/project/issues?id=d4kw1n_security-scan&pullRequest=${{ github.event.pull_request.number }}) for details."

            # Post comment to PR
            echo -e "$comment" > comment.md
            gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
            exit 1 # Fail the workflow to block merge
          else
            echo "✅ No issues found and Quality Gate passed. PR can be merged."
            exit 0 # Success, allow merge
          fi
        continue-on-error: false