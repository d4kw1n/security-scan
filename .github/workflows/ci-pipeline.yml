name: SonarQube Cloud Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Grant execute permission to jest
        run: chmod +x ./node_modules/.bin/jest

      - name: Run tests with coverage
        run: npm test
        continue-on-error: true

      - name: SonarQube Scan
        id: sonar_scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.organization=d4kw1n
            -Dsonar.projectKey=d4kw1n_security-scan
            -Dsonar.sources=.
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.exclusions=node_modules/**,dist/**,coverage/**
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.qualitygate.wait=true
        continue-on-error: true

      - name: Check for Vulnerabilities and Analyze with Perplexity
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          # Query SonarCloud API for vulnerabilities
          response=$(curl -s -f -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/issues/search?componentKeys=d4kw1n_security-scan&types=VULNERABILITY&statuses=OPEN,CONFIRMED,REOPENED&pullRequest=${{ github.event.pull_request.number }}")
          if [ $? -ne 0 ]; then
            echo "❌ Failed to query SonarCloud API. Check SONAR_TOKEN or network."
            exit 1
          fi

          # Extract vulnerabilities
          vulnerabilities=$(echo "$response" | jq '.issues')
          if [ $? -ne 0 ]; then
            echo "❌ Failed to parse SonarCloud API response. Response: $response"
            exit 1
          fi

          # Check if there are vulnerabilities or Quality Gate failed
          if [ "$(echo "$vulnerabilities" | jq length)" -gt 0 ] || [ "${{ steps.sonar_scan.outcome }}" != "success" ]; then
            # Initialize comment
            comment="⚠️ **SonarCloud Quality Gate Failed!**\n\n"
            if [ "$(echo "$vulnerabilities" | jq length)" -gt 0 ]; then
              comment+="### Vulnerabilities Analysis by Perplexity\n"
              # Loop through each vulnerability
              echo "$vulnerabilities" | jq -r '.[] | @base64' | while read -r vuln_base64; do
                vuln=$(echo "$vuln_base64" | base64 --decode)
                rule=$(echo "$vuln" | jq -r '.rule')
                message=$(echo "$vuln" | jq -r '.message')
                severity=$(echo "$vuln" | jq -r '.severity')
                file=$(echo "$vuln" | jq -r '.component')
                line=$(echo "$vuln" | jq -r '.line // "N/A"')

                # Escape special characters in query
                query=$(printf "Analyze the following code vulnerability from SonarCloud and provide a detailed explanation, including why it is a security issue, potential impact, and recommended fixes:\n\n- Rule: %s\n- Message: %s\n- Severity: %s\n- File: %s\n- Line: %s" "$rule" "$message" "$severity" "$file" "$line" | jq -sR '.')

                # Call Perplexity API
                api_response=$(curl -s -w "\n%{http_code}" -X POST \
                  -H "Authorization: Bearer $PERPLEXITY_API_KEY" \
                  -H "Content-Type: application/json" \
                  https://api.perplexity.ai/chat/completions \
                  -d "{\"model\":\"sonar-deep-research\",\"messages\":[{\"role\":\"user\",\"content\":$query}]}")
                
                # Split response and HTTP code
                http_code=$(echo "$api_response" | tail -n1)
                api_body=$(echo "$api_response" | sed '$d')

                if [ "$http_code" != "200" ]; then
                  echo "❌ Failed to get Perplexity analysis for vulnerability: $rule. HTTP Code: $http_code, Response: $api_body"
                  comment+="\n- **$rule**: $message\n  - Severity: $severity, File: $file, Line: $line\n  - Analysis: Failed to retrieve analysis from Perplexity (HTTP $http_code).\n"
                else
                  # Extract Perplexity analysis
                  analysis=$(echo "$api_body" | jq -r '.choices[0].message.content // "Failed to get analysis from Perplexity."')
                  if [ "$analysis" = "Failed to get analysis from Perplexity." ]; then
                    echo "❌ Failed to parse Perplexity response for vulnerability: $rule. Response: $api_body"
                    comment+="\n- **$rule**: $message\n  - Severity: $severity, File: $file, Line: $line\n  - Analysis: Failed to parse analysis from Perplexity.\n"
                  else
                    comment+="\n- **$rule**: $message\n  - Severity: $severity, File: $file, Line: $line\n  - Analysis:\n    $analysis\n"
                  fi
                fi
              done
            else
              comment+="No vulnerabilities found, but Quality Gate failed due to other criteria (e.g., coverage).\n"
            fi
            comment+="\nPlease review and address these issues. See [SonarCloud Dashboard](https://sonarcloud.io/project/issues?id=d4kw1n_security-scan&pullRequest=${{ github.event.pull_request.number }}) for details."

            # Post comment to PR
            echo -e "$comment" > comment.md
            gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
            exit 1 # Fail the workflow to block merge
          else
            echo "✅ No vulnerabilities found and Quality Gate passed. PR can be merged."
            exit 0 # Success, allow merge
          fi
        continue-on-error: false