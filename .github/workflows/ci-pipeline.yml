name: SonarQube Cloud Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # - name: Install dependencies
      #   run: npm ci
      #   continue-on-error: true

      - name: Grant execute permission to jest
        run: chmod +x ./node_modules/.bin/jest
        continue-on-error: true

      - name: Run tests with coverage
        run: npm test
        continue-on-error: true

      - name: Start MongoDB
        run: |
          docker run -d --name mongodb -p 27017:27017 mongo:latest
        continue-on-error: true

      - name: Wait for MongoDB to be Ready
        run: |
          timeout 60s bash -c "until docker exec mongodb mongosh --eval 'db.stats()' --quiet; do sleep 1; done"
        continue-on-error: true

      - name: Start Application
        run: npm start > app.log 2>&1 &
        env:
          CI: true
          PORT: 8000
          MONGODB_URL: mongodb://localhost:27017/course
          KEY_ACCESS_TOKEN_JWT: abc
          KEY_REFRESH_TOKEN_JWT: abc
        continue-on-error: true

      - name: Check if port 8000 is listening
        run: |
          sudo apt-get update && sudo apt-get install -y lsof
          lsof -i :8000 || echo "Port 8000 is not listening"
        continue-on-error: true

      - name: Debug Application Log
        if: failure()
        run: cat app.log
        continue-on-error: true

      - name: Grant permissions to working directory
        run: |
          chmod -R a+w /home/runner/work/security-scan/security-scan
        continue-on-error: true

      - name: Run npm audit
        run: |
          docker run --rm -v $(pwd):/app d4kw1n/npm-audit:latest > audit-report.json || echo "npm audit completed with vulnerabilities"
        continue-on-error: true

      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: audit-report.json
        if: always()

      - name: Comment npm audit results on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let auditReport;
            try {
              auditReport = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
            } catch (error) {
              auditReport = { error: 'Failed to parse audit-report.json: ' + error.message };
            }

            let commentBody = '## npm audit Results\n\n';
            if (auditReport.error) {
              commentBody += `❌ Error: ${auditReport.error}\n`;
            } else if (!auditReport.vulnerabilities || Object.keys(auditReport.vulnerabilities).length === 0) {
              commentBody += '✅ No vulnerabilities found.\n';
            } else {
              const vulnCount = auditReport.metadata.vulnerabilities;
              commentBody += `⚠️ Found ${Object.keys(auditReport.vulnerabilities).length} vulnerabilities:\n`;
              commentBody += `- Critical: ${vulnCount.critical}\n`;
              commentBody += `- High: ${vulnCount.high}\n`;
              commentBody += `- Moderate: ${vulnCount.moderate}\n`;
              commentBody += `- Low: ${vulnCount.low}\n\n`;
              commentBody += '### Details\n';

              for (const [pkg, vuln] of Object.entries(auditReport.vulnerabilities)) {
                commentBody += `- **${pkg}** (Severity: ${vuln.severity.toUpperCase()})\n`;
                if (vuln.via && vuln.via.length > 0) {
                  const cves = vuln.via
                    .filter(v => v.cve)
                    .map(v => v.cve)
                    .join(', ');
                  commentBody += `  - CVEs: ${cves || 'None'}\n`;
                  const descriptions = vuln.via
                    .filter(v => v.title)
                    .map(v => v.title)
                    .join('; ');
                  commentBody += `  - Description: ${descriptions || 'No description available'}\n`;
                }
                if (vuln.fixAvailable) {
                  commentBody += `  - Fix: Run \`npm audit fix\` or update to ${vuln.fixAvailable.toVersion || 'latest'}\n`;
                }
                commentBody += '\n';
              }
              commentBody += '📝 Full details in the `npm-audit-report` artifact.\n';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Check for critical npm vulnerabilities
        run: |
          if [ -f audit-report.json ] && jq -e '.metadata.vulnerabilities.critical > 0' audit-report.json; then
            echo "Critical vulnerabilities found in npm audit!"
            exit 1
          else
            echo "No critical vulnerabilities found in npm audit or audit report is invalid."
          fi
        continue-on-error: true

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://example.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        continue-on-error: true

      - name: SonarQube Scan
        id: sonar_scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.organization=d4kw1n
            -Dsonar.projectKey=d4kw1n_security-scan
            -Dsonar.sources=.
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.exclusions=node_modules/**,dist/**,coverage/**
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.qualitygate.wait=true
        continue-on-error: true

      - name: Check for SonarCloud Vulnerabilities and Analyze with Perplexity
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          response=$(curl -s -f -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/issues/search?componentKeys=d4kw1n_security-scan&types=VULNERABILITY&statuses=OPEN,CONFIRMED,REOPENED&pullRequest=${{ github.event.pull_request.number }}")
          if [ $? -ne 0 ]; then
            echo "❌ Failed to query SonarCloud API. Check SONAR_TOKEN or network. Response: $response"
            exit 1
          fi

          vulnerabilities=$(echo "$response" | jq '.issues')
          if [ $? -ne 0 ]; then
            echo "❌ Failed to parse SonarCloud API response. Response: $response"
            exit 1
          fi

          comment="## SonarCloud Vulnerability Analysis\n\n"
          if [ "$(echo "$vulnerabilities" | jq length)" -gt 0 ] || [ "${{ steps.sonar_scan.outcome }}" != "success" ]; then
            if [ "$(echo "$vulnerabilities" | jq length)" -gt 0 ]; then
              comment+="### Vulnerabilities Detected\n"
              echo "$vulnerabilities" | jq -r '.[] | @base64' | while read -r vuln_base64; do
                vuln=$(echo "$vuln_base64" | base64 --decode)
                rule=$(echo "$vuln" | jq -r '.rule')
                message=$(echo "$vuln" | jq -r '.message')
                severity=$(echo "$vuln" | jq -r '.severity')
                file=$(echo "$vuln" | jq -r '.component' | sed 's/.*://')
                line=$(echo "$vuln" | jq -r '.line // "N/A"')

                code_snippet=""
                if [ "$line" != "N/A" ] && [ -f "$file" ]; then
                  start_line=$((line - 2 > 0 ? line - 2 : 1))
                  end_line=$((line + 2))
                  code_snippet=$(sed -n "${start_line},${end_line}p" "$file" | jq -sR .)
                else
                  code_snippet="\"Code snippet not available (file missing or line not specified).\""
                fi

                payload=$(jq -n \
                  --arg rule "$rule" \
                  --arg message "$message" \
                  --arg severity "$severity" \
                  --arg file "$file" \
                  --arg line "$line" \
                  --argjson code "$code_snippet" \
                  '{model: "sonar-reasoning", messages: [{role: "user", content: "Analyze the following code vulnerability from SonarCloud and provide a detailed explanation, including why it is a security issue, potential impact, and recommended fixes:\n\n- Rule: \($rule)\n- Message: \($message)\n- Severity: \($severity)\n- File: \($file)\n- Line: \($line)\n- Code:\n```\n\($code)\n```"}]}')

                if ! echo "$payload" | jq . >/dev/null 2>&1; then
                  comment+="\n- **$rule**: $message\n  - Severity: $severity, File: $file, Line: $line\n  - Code: Not available\n  - Analysis: Failed to create valid request for Perplexity.\n"
                  continue
                fi

                api_response=$(curl -s -w "\n%{http_code}" -X POST \
                  -H "Authorization: Bearer $PERPLEXITY_API_KEY" \
                  -H "Content-Type: application/json" \
                  https://api.perplexity.ai/chat/completions \
                  -d "$payload")

                http_code=$(echo "$api_response" | tail -n1)
                api_body=$(echo "$api_response" | sed '$d')

                if [ "$http_code" != "200" ]; then
                  comment+="\n- **$rule**: $message\n  - Severity: $severity, File: $file, Line: $line\n  - Code: Not available\n  - Analysis: Failed to retrieve analysis from Perplexity (HTTP $http_code).\n"
                else
                  if ! echo "$api_body" | jq . >/dev/null 2>&1; then
                    comment+="\n- **$rule**: $message\n  - Severity: $severity, File: $file, Line: $line\n  - Code: Not available\n  - Analysis: Invalid response from Perplexity.\n"
                  else
                    analysis=$(echo "$api_body" | jq -r '.choices[0].message.content // ""')
                    if [ -z "$analysis" ]; then
                      comment+="\n- **$rule**: $message\n  - Severity: $severity, File: $file, Line: $line\n  - Code: Not available\n  - Analysis: No analysis provided by Perplexity.\n"
                    else
                      clean_analysis=$(echo "$analysis" | sed '/<think>/,/<\/think>/d' | sed '/^$/N;/\n$/D')
                      if [ "$code_snippet" != "\"Code snippet not available (file missing or line not specified).\"" ]; then
                        comment+="\n- **$rule**: $message\n  - Severity: $severity, File: $file, Line: $line\n  - Code:\n    \`\`\`\n$(echo "$code_snippet" | jq -r .)\n    \`\`\`\n  - Analysis:\n    $clean_analysis\n"
                      else
                        comment+="\n- **$rule**: $message\n  - Severity: $severity, File: $file, Line: $line\n  - Code: Not available\n  - Analysis:\n    $clean_analysis\n"
                      fi
                    fi
                  fi
                fi
                sleep 1
              done
            else
              comment+="No vulnerabilities found, but Quality Gate failed due to other criteria (e.g., coverage).\n"
            fi
            comment+="\n📝 Please review and address these issues. See [SonarCloud Dashboard](https://sonarcloud.io/project/issues?id=d4kw1n_security-scan&pullRequest=${{ github.event.pull_request.number }}) for details.\n"
          else
            comment="✅ No vulnerabilities found and Quality Gate passed.\n"
          fi

          echo -e "$comment" > sonar-comment.md
          gh pr comment ${{ github.event.pull_request.number }} --body-file sonar-comment.md
        continue-on-error: false